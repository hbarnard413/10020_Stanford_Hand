
/**
 *
 * \file aei_client.h
 *
 *	AEI Sensor Client Functions
 *
 * Copyright (c) 2014, Synapticon GmbH & XMOS Ltd
 * All rights reserved.
 * Authors: Pavan Kanajar <pkanajar@synapticon.com> & Martin Schwarz <mschwarz@synapticon.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Execution of this software or parts of it exclusively takes place on hardware
 *    produced by Synapticon GmbH.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the Synapticon GmbH.
 *
 */

#ifndef __AEI_CLIENT_H__
#define __AEI_CLIENT_H__

#include <bldc_motor_config.h>
#include "filter_blocks.h"
#include <print.h>
#include <xs1.h>
#include <stdio.h>
#include "aei_config.h"


/**
 * \brief struct definition for velocity calculation from aei sensor
 */
typedef struct AEI_VELOCITY_PARAM
{
	int previous_position;
	int old_difference;
	int filter_buffer[8];
	int index;
	int filter_length;
} aei_velocity_par;

/**
 * \brief Get position from AEI Server
 *
 *  Output channel
 * \channel c_aei for communicating with the AEI Server
 *
 *  Input
 * \param aei_params the struct defines sensor type and resolution parameters for aei
 *
 *  Output
 * \return  position from aei sensor in the range [0 - log(encoder_resolution)/log(2)]
 * \return  valid for aei with index sensors: not valid - 0/ valid - 1
 */
{int, unsigned int} get_aei_position(chanend c_aei, aei_par &aei_params);

/**
 *  \brief Get absolute position from AEI Server
 *
 *  Output channel
 * \channel c_aei for communicating with the AEI Server
 *
 *	Output
 * \return  counted up position from aei sensor (incorporates gear ratio)
 * 			in the range [0 - encoder_resolution] * gear-ratio
 * \return  direction of rotation, clockwise : 1 / anti-clockwise : -1
 */
{int, int} get_aei_position_absolute(chanend c_aei);

/**
 * \brief Initialize struct for velocity calculation from AEI sensor
 *
 *	Input
 * \aei_velocity_params  struct is initialised
 *
 */
void init_aei_velocity_params(aei_velocity_par &aei_velocity_params);

/**
 * \brief Calculates the velocity from AEI sensor in 1 ms loop
 *
 *	Output channel
 * \channel c_aei for communicating with the AEI Server
 *
 *  Input
 * \aei_params the struct defines sensor type and resolution parameters for aei
 * \aei_velocity_params struct for velocity calculation
 *
 *  Output
 * \return velocity from aei sensor in rpm
 */
int get_aei_velocity(chanend c_aei, aei_par &aei_params, aei_velocity_par &aei_velocity_params);

/**
 * \brief Internal function to calculate AEI position information
 *
 *  Input
 * \real_counts aei counts per rotation
 *
 *  Output
 * \return  max position from aei sensor
 */
extern int __aei_max_counts(int real_counts);

/**
 * \brief Internal function
 */
{int, int, int} get_aei_sync_position(chanend c_aei);

/**
 * \brief Internal function
 */
void set_aei_sync_offset(chanend c_aei, int offset_forward, int offset_backward);


#endif /* __AEI_CLIENT_H__ */
